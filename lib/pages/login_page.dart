import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:logistic/models/ktlogistics_token.dart';
import 'package:logistic/pages/home/home_page.dart';
import 'package:logistic/services/authservice.dart';
import 'package:logistic/services/signalRservice.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:intl/intl.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  // Controllers ƒë·ªÉ l·∫•y gi√° tr·ªã t·ª´ c√°c √¥ nh·∫≠p li·ªáu
  final TextEditingController usernameController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  final TextEditingController fromHostController = TextEditingController();

  // Tr·∫°ng th√°i t·∫£i
  bool isLoading = false;

  @override
  void initState() {
    super.initState();
    checkAutoLogin(); // G·ªçi tryAutoLogin khi trang ƒë∆∞·ª£c kh·ªüi t·∫°o
  }

  void checkAutoLogin() async {
    final success = await tryAutoLogin();
    if (success) {
      final tokenData = await AuthService.getStoredKtLogisticsToken();
      if (tokenData != null) {
        
        // ƒê·ªÉ sau khi build xong UI m·ªõi push
        WidgetsBinding.instance.addPostFrameCallback((_) {
          _navigateToHomePage(tokenData);
          
        });
          
      }
    } else {
      print('C·∫ßn ƒëƒÉng nh·∫≠p l·∫°i');
      // WidgetsBinding.instance.addPostFrameCallback((_) {
      //   Navigator.pushReplacement(context, MaterialPageRoute(builder: (_) => LoginPage()));
      // });
    }
  }

  void _navigateToHomePage(KtLogisticsToken tokenData) {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (context) => HomePage(token: tokenData)),
    );
  }

 Future<void> handleLogin() async {
  final username = usernameController.text.trim();
  final password = passwordController.text.trim();
  final fromHost = fromHostController.text.trim();

  if (username.isEmpty || password.isEmpty || fromHost.isEmpty) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin')),
    );
    return;
  }

  setState(() => isLoading = true);

  final result = await AuthService.login(
    username: username,
    password: password,
    fromHost: fromHost,
  );

  setState(() => isLoading = false);

  if (result['success']) {
    final KtLogisticsToken tokenData = result['data'];

    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setBool('isLoggedIn', true);
    await prefs.setString('authToken', tokenData.authenticateToken);
    await prefs.setString('token_data', jsonEncode(result['data']));
    await prefs.setString('userId', tokenData.userLogisticsInfosModels?.oneUserLogisticsInfo.userId ?? '');

    // ‚úÖ G·ªçi SignalR sau khi ƒë√£ l∆∞u userId
    await SignalRService().startConnection(tokenData.userLogisticsInfosModels.oneUserLogisticsInfo.userId.toString());
    print("üîå K·∫øt n·ªëi SignalR th√†nh c√¥ng v·ªõi userId: ${tokenData.userLogisticsInfosModels.oneUserLogisticsInfo.userId}");

    // ‚úÖ Di chuy·ªÉn ƒë·∫øn HomePage
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(builder: (context) => HomePage(token: tokenData)),
    );
  } else {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(result['message'] ?? 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i')),
    );
  }
}

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('ƒêƒÉng nh·∫≠p')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // √î nh·∫≠p Username
            TextField(
              controller: usernameController,
              decoration: const InputDecoration(
                labelText: 'T√™n ƒëƒÉng nh·∫≠p',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            // √î nh·∫≠p Password
            TextField(
              controller: passwordController,
              obscureText: true,
              decoration: const InputDecoration(
                labelText: 'M·∫≠t kh·∫©u',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            // √î nh·∫≠p FromHost
            TextField(
              controller: fromHostController,
              decoration: const InputDecoration(
                labelText: 'From Host',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 20),
            // N√∫t ƒëƒÉng nh·∫≠p
            isLoading
                ? const CircularProgressIndicator() // Hi·ªÉn th·ªã loading khi ƒëang x·ª≠ l√Ω
                : ElevatedButton(
                  onPressed: handleLogin,
                  child: const Text('ƒêƒÉng nh·∫≠p'),
                ),
          ],
        ),
      ),
    );
  }
}

Future<bool> tryAutoLogin() async {
  final token = await AuthService.getAuthenticateToken();
  final expired = await AuthService.getExpiredAuthenticateToken();
  final refresh = await AuthService.getRefreshToken();

  if (token == null || expired == null) {
    print("‚ùå Kh√¥ng c√≥ token ho·∫∑c ng√†y h·∫øt h·∫°n");
    return false;
  }

  final formattedExpired =
      expired.substring(0, 4) +
      '-' +
      expired.substring(4, 6) +
      '-' +
      expired.substring(6, 8) +
      'T' +
      expired.substring(8, 10) +
      ':' +
      expired.substring(10, 12) +
      ':' +
      expired.substring(12, 14);

  final now = DateTime.now();
  final expiredDate = DateTime.tryParse(formattedExpired);
  await SignalRService().startConnection(token.userLogisticsInfosModels.oneUserLogisticsInfo.userId.toString());
  if (expiredDate == null) {
    print("‚ùå Ng√†y h·∫øt h·∫°n kh√¥ng h·ª£p l·ªá: $formattedExpired");
    return false;
  }

  if (now.isBefore(expiredDate)) {
    print("‚úÖ Token c√≤n h·∫°n, ti·∫øp t·ª•c s·ª≠ d·ª•ng");
    return true;
  }

  if (refresh != null) {
    final result = await AuthService.refreshToken(refresh);
    return result['success'] == true;
  }

  print("‚ùå Token ƒë√£ h·∫øt h·∫°n v√† kh√¥ng c√≥ refreshToken ƒë·ªÉ l√†m m·ªõi");
  return false;
}

