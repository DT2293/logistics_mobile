import 'dart:async';

import 'package:signalr_core/signalr_core.dart';

import 'package:signalr_core/signalr_core.dart';

class SignalRService {
  late HubConnection _connection;

  // Stream controller ƒë·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn UI
  final StreamController<String> _notificationStreamController = StreamController<String>.broadcast();
  Stream<String> get notificationStream => _notificationStreamController.stream;

  Future<void> startConnection(String userId) async {
    _connection = HubConnectionBuilder()
        .withUrl(
          'https://logistics.huetechcoop.com/notificationUserHub',
          HttpConnectionOptions(
            transport: HttpTransportType.webSockets,
            skipNegotiation: true,
          ),
        )
        .withAutomaticReconnect()
        .build();

    _connection.on("ReceiveNotification", _receiveNotification);

    try {
      await _connection.start();
      print("‚úÖ SignalR Connected v·ªõi userId: $userId");
      await _connection.invoke('ConnectWithUserId', args: [userId]);
    } catch (e) {
      print("‚ùå SignalR Connection Error: $e");
      rethrow;
    }
  }

  // X·ª≠ l√Ω nh·∫≠n th√¥ng b√°o
  void _receiveNotification(List<Object?>? notification) {
    print("üì® Nh·∫≠n th√¥ng b√°o m·ªõi: $notification");
    try {
      if (notification != null) {
        // B·∫°n c√≥ th·ªÉ t√πy ch·ªânh d·ªØ li·ªáu th√¥ng b√°o n·∫øu c·∫ßn
        String heading = notification[0] as String;
        String content = notification[1] as String;

        // G·ª≠i th√¥ng b√°o ƒë·∫øn UI qua stream
        _notificationStreamController.sink.add('New Notification: $heading - $content');
      }
    } catch (error) {
      print("L·ªói khi x·ª≠ l√Ω th√¥ng b√°o: $error");
    }
  }

  // D·ª´ng k·∫øt n·ªëi SignalR
  Future<void> stopConnection() async {
    await _connection.stop();
  }

  bool get isConnected => _connection.state == HubConnectionState.connected;

  // H·ªßy stream khi kh√¥ng c·∫ßn s·ª≠ d·ª•ng n·ªØa
  void dispose() {
    _notificationStreamController.close();
  }
}
